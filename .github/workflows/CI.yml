# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request 
# events but only for the master branch
on:
  push:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@master
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.102
      - name: Build
        working-directory: ./src
        run: dotnet build -c Release ./ExpressionShortcuts/ExpressionShortcuts.csproj
  
  test:
    name: Test
    runs-on: windows-latest
    needs: [build]
    steps:
      - uses: actions/checkout@master
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.102
      - name: Test
        working-directory: ./src
        run: dotnet test ./ExpressionShortcuts.Tests/ExpressionShortcuts.Tests.csproj
  
  sonar:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
    - uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.102
    - name: Sonarscanner for dotnet
      uses: Secbyte/dotnet-sonarscanner@v2.2
      with:
        buildCommand: dotnet build src/ExpressionShortcuts/ExpressionShortcuts.csproj -f netstandard2.0
        testCommand: dotnet test src/ExpressionShortcuts.Tests/ExpressionShortcuts.Tests.csproj --collect:"XPlat code coverage" --settings coverlet.runsettings
        projectKey: zjklee_ExpressionShortcuts
        projectName: ExpressionShortcuts
        sonarOrganisation: zjklee
        beginArguments: >
            /d:sonar.verbose="true"
            /d:sonar.cs.opencover.reportsPaths='"*.opencover.xml"'
            /d:sonar.coverage.exclusions='"**/*.cs","**/*.md"'
            
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
        
  publish:
    name: list on nuget
    needs: [build,test,sonar]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      # Required for a specific dotnet version that doesn't come with ubuntu-latest / windows-latest
      # Visit bit.ly/2synnZl to see the list of SDKs that are pre-installed with ubuntu-latest / windows-latest
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.1.100
      
      # Publish
      - name: publish on version change
        uses: rohith/publish-nuget@v2
        with:
          PROJECT_FILE_PATH: ./src/ExpressionShortcuts/ExpressionShortcuts.csproj # Relative to repository root
          # VERSION_FILE_PATH: Directory.Build.props # Filepath with version info, relative to repository root. Defaults to project file
          # VERSION_REGEX: <Version>(.*)<\/Version> # Regex pattern to extract version info in a capturing group
          # TAG_COMMIT: true # Flag to enable / disalge git tagging
          # TAG_FORMAT: v* # Format of the git tag, [*] gets replaced with version
          # NUGET_KEY: ${{secrets.NUGET_API_KEY}} # nuget.org API key
          # PACKAGE_NAME: NuGet package name, required when it's different from project name. Defaults to project name
